Your task is to **generate a comprehensive technical specification** based on an existing project request and any relevant guidelines or templates. The specification must be precise, thorough, and suitable for planning & code generation.

---

## **Required Inputs**

1. **REQUEST**: The existing project or feature request in `<project_request>`.
2. **RULES**: The guidelines or best practices in `<project_rules>`, if any.

---

## **Optional Inputs**

1. **TEMPLATE**: A starter template or reference design in `<starter_template>`.

---

## **Task Overview**

This prompt instructs the AI to:

1. Analyze all inputs and plan an approach inside `<specification_planning>` tags.
2. Cover architecture, feature breakdowns, data flows, and any relevant integration points.
3. Return a final specification in Markdown with defined sections (1 through 12).

---

## **Detailed Process Outline**

1. **Review Inputs**: The AI reviews `<project_request>`, `<project_rules>`, and (optionally) `<starter_template>`.
2. **Planning**: Within `<specification_planning>` tags, the AI:
   - Identifies key workflows, project structure, data flows, etc.
   - Pinpoints challenges and clarifies requirements.
3. **Specification Output**: The AI creates a detailed specification in the following order:
   1. System Overview
   2. Project Structure
   3. Feature Specification
   4. Database Schema
   5. Server Actions
   6. Design System
   7. Component Architecture
   8. Authentication & Authorization
   9. Data Flow
   10. Payment Integration
   11. Analytics Integration
   12. Testing
4. **Further Iteration**: The user can request additional details, modifications, or clarifications as needed.

---

## **Guidelines**

Ensure that your specification is **extremely detailed**, giving **implementation guidance** and examples for complex features. Clearly define interfaces and data contracts. Summarize your final spec at the end, noting any open questions.

We'll keep refining the request until I indicate it's complete and ready.

---

## **Output Template**

```markdown
# {Project Name} Technical Specification

## 1. System Overview
- Core purpose
- Key workflows
- System architecture

## 2. Project Structure
- Detailed breakdown & organization

## 3. Feature Specification
### 3.1 Feature Name
- User story & requirements
- Detailed implementation steps
- Error handling & edge cases

## 4. Database Schema
### 4.1 Tables
- Field names, types, constraints
- Relationships & indexes

## 5. Server Actions
### 5.1 Database Actions
- Description
- Input parameters & return values
- Queries or operations

### 5.2 Other Actions
- External API integrations
- File handling procedures
- Data processing algorithms

## 6. Design System
### 6.1 Visual Style
- Overall look & feel
- Typography, spacing, layouts

### 6.2 Core Components
- Layout structure & navigation
- Shared components
- Interactive states

## 7. Component Architecture
### 7.1 Server Components
- Data fetching
- Error boundaries
- Types & interfaces

### 7.2 Client Components
- State management
- Event handlers
- Types & interfaces

## 8. Authentication & Authorization
- Methods & session management
- Protected routes setup

## 9. Data Flow
- Server/client data patterns
- State management details

## 10. Payment Integration
- Payment flow diagram
- Webhook handling
- Product/Price structure

## 11. Analytics Integration
- Event tracking strategy
- Custom property definitions

## 12. Testing
- Unit tests
- e2e tests
```

---

## **Context**

<project_request>
{{insert_request_here}}
</project_request>

<project_rules>
{{insert_rules_here}}
</project_rules>

<starter_template>
{{insert_template_here}}
</starter_template>

---
